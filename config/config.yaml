# config/config.yaml

# PS_COMMAND格式： 1. 别名：“命令” 2.直接写命令如RDS和WSUS
PS_COMMAND:
  no_1.1: "None"
  no_1.2: "Get-VMHost | Select-Object Name, @{Name=\"NTPSetting\"; Expression={ ($_ | Get-VMHostNtpServer)}}"
  no_1.3: "None"
  no_1.4: "Get-VMHost | Get-AdvancedSetting -Name Mem.ShareForceSalting | Select-Object Name, Value, Type, Description"
  no_2.1: "Get-VMHost | Get-VMHostService | Where { $_.key -eq \"TSM-SSH\" } | Select Key, Label, Policy, Running, Required"
  no_2.2: "Get-VMHost | Get-VMHostService | Where { $_.key -eq \"TSM\" } | Select Key, Label, Policy, Running, Required"
  no_2.3: "Get-VMHost | Get-AdvancedSetting -Name Config.HostAgent.plugins.solo.enableMob | Select Name, Value, Type, Description"
  no_2.4: "None"
  no_2.5: "Get-VMHost | Get-AdvancedSetting -Name UserVars.DcuiTimeOut"
  no_2.6: "None"
  no_2.7: "Get-VMHOST | Get-AdvancedSetting -Name “Security.PasswordQualityControl\"\" | Set-AdvancedSetting -Value \"retry=3 min=disabled,disabled,disabled,disabled,20\""
  no_2.8: "Get-VMHost | Get-AdvancedSetting -Name Security.AccountLockFailurev"
  no_2.9: "Get-VMHost | Get-AdvancedSetting -Name Security.AccountUnlockTime"
  no_2.10: "Get-VMHost | Get-AdvancedSetting Security.PasswordHistory"
  no_2.11: "None"
  no_2.12: "None"
  no_2.13: "None"
  no_2.14: "Get-VMHost | Get-AdvancedSetting -Name DCUI.Access"
  no_2.15: "None"
  no_2.16: "None"
  no_3.1: "Get-VMHost | Select Name, @{N=\"Syslog.global.logDir\";E={$_ | Get-AdvancedConfiguration Syslog.global.logDir | Select -ExpandProperty Values}}"
  no_3.2: "Get-VMHost | Select Name, @{N=\"Syslog.global.logHost\";E={$_ | Get-AdvancedSetting Syslog.global.logHost}}"
  no_3.3: "None"
  no_3.4: "None"
  no_3.5: "None"
  no_4.1: "Get-VMHost HOST1 | Get-VMHostService"
  no_4.2: "Get-VMHost | Select Name, @{N=\"Net.DVFilterBindIpAddress\";E={$_ | Get-AdvancedSetting Net.DVFilterBindIpAddress | Select -ExpandProperty Values}}"
  no_4.3: "None"
  no_4.4: "Get-VirtualSwitch -Standard | Select VMHost, Name, @{N=\"MacChanges\";E={if ($_.ExtensionData.Spec.Policy.Security.MacChanges) {\"Accept\"} Else {\"Reject\"} }}, @{N=\"PromiscuousMode\";E={if ($_.ExtensionData.Spec.Policy.Security.PromiscuousMode) {\"Accept\"} Else {\"Reject\"} }}, @{N=\"ForgedTransmits\";E={if ($_.ExtensionData.Spec.Policy.Security.ForgedTransmits) {\"Accept\"} Else {\"Reject\"} }}"
  no_4.5: "Get-VirtualSwitch -Standard | Select VMHost, Name, @{N=\"MacChanges\";E={if ($_.ExtensionData.Spec.Policy.Security.MacChanges) {\"Accept\"} Else {\"Reject\"} }}, @{N=\"PromiscuousMode\";E={if ($_.ExtensionData.Spec.Policy.Security.PromiscuousMode) {\"Accept\"} Else {\"Reject\"} }}, @{N=\"ForgedTransmits\";E={if ($_.ExtensionData.Spec.Policy.Security.ForgedTransmits) {\"Accept\"} Else {\"Reject\"} }}"
  no_4.6: "Get-VirtualSwitch -Standard | Select VMHost, Name, @{N=\"MacChanges\";E={if ($_.ExtensionData.Spec.Policy.Security.MacChanges) {\"Accept\"} Else {\"Reject\"} }}, @{N=\"PromiscuousMode\";E={if ($_.ExtensionData.Spec.Policy.Security.PromiscuousMode) {\"Accept\"} Else {\"Reject\"} }}, @{N=\"ForgedTransmits\";E={if ($_.ExtensionData.Spec.Policy.Security.ForgedTransmits) {\"Accept\"} Else {\"Reject\"} }}"
  no_4.7: "Get-VirtualPortGroup -Standard | Select virtualSwitch, Name, VlanId"
  no_4.8: "None"
  no_4.9: "None"
  no_5.1: "Get-VMHost | Select Name, @{N=\"DCUI.Access\";E={$_ | Get-AdvancedSetting DCUI.Access | Select -ExpandProperty Values}}"
  no_5.2: "Get-VMHost | Select Name, @{N=\"UserVars.DcuiTimeOut\";E={$_ | Get-AdvancedSetting UserVars.DcuiTimeOut | Select -ExpandProperty Values}}"
  no_5.3: "None"
  no_6.1: "Get-VMHost | Get-AdvancedSetting -Name isolation.tools.copy.disable"
  no_6.2: "Get-VMHost | Get-AdvancedSetting -Name isolation.tools.paste.disable"
  no_6.3: "Get-VMHost | Get-AdvancedSetting -Name isolation.tools.setGUIOptions.enable"
  no_6.4: "Get-VM | Get-SoundCard"
  no_6.5: "Get-VM | Get-USBDevice"
  no_6.6: "Get-VM | Get-SerialPort"
  no_6.7: "Get-VM | Get-ParallelPort"
  no_6.8: "Get-VM | Get-CDDrive"
  no_6.9: "Get-VM | Get-FloppyDrive | Select Parent, Name, ConnectionState"
  no_7.1: "None"
  no_7.2: "None"
  no_7.3: "None"

# 定义数据环境 prod/test
DB_ENV: prod

# 插入数据库 sql
INSERT_SQL: ""

# 定义运行时间的间隔（单位：分钟）
EXECUTION_INTERVAL: 10

# 收集 RDS 相关信息配置
# PS_COMMAND: "Get-WmiObject Win32_TSLicenseKeyPack | Select-Object KeyPackId, ProductVersion, TypeAndModel, AvailableLicenses, IssuedLicenses | ConvertTo-Json"
# INSERT_SQL: "INSERT INTO Infra_Daily_Check (Creat_Time, rds_prod_license, Insert_Time) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE rds_prod_license = VALUES(rds_prod_license), Insert_Time = VALUES(Insert_Time)"

# 收集 WSUS 相关信息配置
# PS_COMMAND: "C:\\wininfo_to_db\\wsus_check.ps1"
# INSERT_SQL: "INSERT INTO Infra_Daily_Check (Creat_Time, wsus_server_info, Insert_Time) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE wsus_server_info = VALUES(wsus_server_info), Insert_Time = VALUES(Insert_Time)"